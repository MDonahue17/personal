{"version":3,"sources":["logo.svg","App.js","components/Stories.jsx","components/NotFound.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","className","class","style","paddingTop","padding","Stories","state","Component","NotFound","Boolean","window","location","hostname","match","routing","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,yIC0B5BC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4CACA,yBAAKC,MAAM,aACT,yBAAKC,MAAO,CAAEC,WAAY,UAG1B,yBAAKF,MAAM,OACT,yBAAKC,MAAO,CAAEE,QAAS,QAAUH,MAAM,UAGvC,yBAAKC,MAAO,CAAEE,QAAS,QAAUH,MAAM,c,uCCHlCI,E,2MAVXC,MAAQ,G,wEAEJ,OACI,yBAAKL,MAAM,aAAX,e,GAJUM,aCWPC,E,2MAVXF,MAAQ,G,wEAEJ,OACI,kD,GAJWC,aCUHE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EACF,6BACI,kBAAC,IAAD,KACI,6BACI,yBAAKb,MAAM,+CACP,kBAAC,IAAD,CAAMc,GAAG,KACL,uBAAGd,MAAM,gBAAT,YAEJ,4BAAQA,MAAM,iBAAiBe,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACpJ,0BAAMpB,MAAM,yBAEhB,yBAAKA,MAAM,2BAA2BqB,GAAG,aACrC,yBAAKrB,MAAM,cACP,kBAAC,IAAD,CAAMc,GAAG,aACL,uBAAGd,MAAM,mBAAT,SAEJ,kBAAC,IAAD,CAAMc,GAAG,YACL,uBAAGd,MAAM,mBAAT,eAKZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,YAAYC,UAAW1B,IACzC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOyB,KAAK,WAAWC,UAAWpB,IAClC,kBAAC,IAAD,CAAOoB,UAAWjB,QAS1CkB,IAASC,OAAOb,EAASc,SAASC,eAAe,SDsF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b44fd9f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>ross is poop</h1>\n      <div class=\"container\">\n        <div style={{ paddingTop: \"10px\" }}>\n          \n        </div>\n        <div class=\"row\">\n          <div style={{ padding: \"10px\" }} class=\"col-7\">\n            \n          </div>\n          <div style={{ padding: \"10px\" }} class=\"col-5\">\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass Stories extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div class=\"container\">\r\n                Stories\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Stories;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <h1>\r\n                404: NOT FOUND\r\n            </h1>\r\n         );\r\n    }\r\n}\r\n \r\nexport default NotFound;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport Stories from './components/Stories';\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <div>\n        <Router>\n            <div>\n                <nav class=\"navbar navbar-expand-lg navbar-dark bg-info\">\n                    <Link to=\"/\">\n                        <a class=\"navbar-brand\">Website</a>\n                    </Link>\n                    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <div class=\"navbar-nav\">\n                            <Link to=\"/personal\">\n                                <a class=\"nav-link active\">Home</a>\n                            </Link>\n                            <Link to=\"/stories\">\n                                <a class=\"nav-link active\">Stories</a>\n                            </Link>\n                        </div>\n                    </div>\n                </nav>\n                    <Switch>\n                        <Route exact path=\"/personal\" component={App} />\n                        <Route exact path=\"/\" component={App} />\n                        <Route path=\"/stories\" component={Stories} />\n                        <Route component={NotFound} />\n                    </Switch>\n            </div>\n        </Router>\n    </div>\n\n\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}